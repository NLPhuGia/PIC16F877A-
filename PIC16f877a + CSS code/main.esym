F N "MAIN" 0 115 ""
D G "__PCM__" 0 201 ""5.051""
D G "__DEVICE__" 0 201 "877"
D G "__DATE__" 0 201 ""15-Thg5-23""
D G "__TIME__" 0 201 ""17:18:12""
D G "_UNICODE" 0 201 ""?""
D G "__EVAL" 0 201 ""?"" "Standard Header file for the PIC16F877A device ////////////////"
c L "set_tris_a" 1 3 6 "FUNCTION"
f N "set_tris_a" 1 37 ""
v L "value" 1 37 "int8" `54 
f B "set_tris_a" 1 37 "void(int8 value)" `53 
f N "set_tris_b" 1 38 ""
v L "value" 1 38 "int8" `56 
f B "set_tris_b" 1 38 "void(int8 value)" `55 
f N "set_tris_c" 1 39 ""
v L "value" 1 39 "int8" `58 
f B "set_tris_c" 1 39 "void(int8 value)" `57 
f N "set_tris_d" 1 40 ""
v L "value" 1 40 "int8" `60 
f B "set_tris_d" 1 40 "void(int8 value)" `59 
f N "set_tris_e" 1 41 ""
v L "value" 1 41 "int8" `62 
f B "set_tris_e" 1 41 "void(int8 value)" `61 
f N "get_tris_a" 1 42 ""
f B "get_tris_a" 1 42 "int8()" `63 
f N "get_tris_b" 1 43 ""
f B "get_tris_b" 1 43 "int8()" `64 
f N "get_tris_c" 1 44 ""
f B "get_tris_c" 1 44 "int8()" `65 
f N "get_tris_d" 1 45 ""
f B "get_tris_d" 1 45 "int8()" `66 
f N "get_tris_e" 1 46 ""
f B "get_tris_e" 1 46 "int8()" `67 
f N "output_a" 1 47 ""
v L "value" 1 47 "int8" `69 
f B "output_a" 1 47 "void(int8 value)" `68 
f N "output_b" 1 48 ""
v L "value" 1 48 "int8" `71 
f B "output_b" 1 48 "void(int8 value)" `70 
f N "output_c" 1 49 ""
v L "value" 1 49 "int8" `73 
f B "output_c" 1 49 "void(int8 value)" `72 
f N "output_d" 1 50 ""
v L "value" 1 50 "int8" `75 
f B "output_d" 1 50 "void(int8 value)" `74 
f N "output_e" 1 51 ""
v L "value" 1 51 "int8" `77 
f B "output_e" 1 51 "void(int8 value)" `76 
f N "input_a" 1 52 ""
f B "input_a" 1 52 "int8()" `78 
f N "input_b" 1 53 ""
f B "input_b" 1 53 "int8()" `79 
f N "input_c" 1 54 ""
f B "input_c" 1 54 "int8()" `80 
f N "input_d" 1 55 ""
f B "input_d" 1 55 "int8()" `81 
f N "input_e" 1 56 ""
f B "input_e" 1 56 "int8()" `82 
f N "input_change_a" 1 57 ""
f B "input_change_a" 1 57 "int8()" `83 
f N "input_change_b" 1 58 ""
f B "input_change_b" 1 58 "int8()" `84 
f N "input_change_c" 1 59 ""
f B "input_change_c" 1 59 "int8()" `85 
f N "input_change_d" 1 60 ""
f B "input_change_d" 1 60 "int8()" `86 
f N "input_change_e" 1 61 ""
f B "input_change_e" 1 61 "int8()" `87 
f N "input" 1 62 ""
v L "pin" 1 62 "int16" `89 
f B "input" 1 62 "int8(int16 pin)" `88 
f N "input_state" 1 63 ""
v L "pin" 1 63 "int16" `91 
f B "input_state" 1 63 "int8(int16 pin)" `90 
f N "output_low" 1 64 ""
v L "pin" 1 64 "int16" `93 
f B "output_low" 1 64 "void(int16 pin)" `92 
f N "output_high" 1 65 ""
v L "pin" 1 65 "int16" `95 
f B "output_high" 1 65 "void(int16 pin)" `94 
f N "output_toggle" 1 66 ""
v L "pin" 1 66 "int16" `97 
f B "output_toggle" 1 66 "void(int16 pin)" `96 
f N "output_bit" 1 67 ""
v L "pin" 1 67 "int16" `99 
v L "level" 1 67 "int8" `100 
f B "output_bit" 1 67 "void(int16 pin,int8 level)" `98 
f N "output_float" 1 68 ""
v L "pin" 1 68 "int16" `102 
f B "output_float" 1 68 "void(int16 pin)" `101 
f N "output_drive" 1 69 ""
v L "pin" 1 69 "int16" `104 
f B "output_drive" 1 69 "void(int16 pin)" `103  "Constants used to identify pins in the above are:"
d G "PIN_A0" 1 73 "40"
d G "PIN_A1" 1 74 "41"
d G "PIN_A2" 1 75 "42"
d G "PIN_A3" 1 76 "43"
d G "PIN_A4" 1 77 "44"
d G "PIN_A5" 1 78 "45"
d G "PIN_B0" 1 80 "48"
d G "PIN_B1" 1 81 "49"
d G "PIN_B2" 1 82 "50"
d G "PIN_B3" 1 83 "51"
d G "PIN_B4" 1 84 "52"
d G "PIN_B5" 1 85 "53"
d G "PIN_B6" 1 86 "54"
d G "PIN_B7" 1 87 "55"
d G "PIN_C0" 1 89 "56"
d G "PIN_C1" 1 90 "57"
d G "PIN_C2" 1 91 "58"
d G "PIN_C3" 1 92 "59"
d G "PIN_C4" 1 93 "60"
d G "PIN_C5" 1 94 "61"
d G "PIN_C6" 1 95 "62"
d G "PIN_C7" 1 96 "63"
d G "PIN_D0" 1 98 "64"
d G "PIN_D1" 1 99 "65"
d G "PIN_D2" 1 100 "66"
d G "PIN_D3" 1 101 "67"
d G "PIN_D4" 1 102 "68"
d G "PIN_D5" 1 103 "69"
d G "PIN_D6" 1 104 "70"
d G "PIN_D7" 1 105 "71"
d G "PIN_E0" 1 107 "72"
d G "PIN_E1" 1 108 "73"
d G "PIN_E2" 1 109 "74"
d G "FALSE" 1 112 "0"
d G "TRUE" 1 113 "1"
d G "BYTE" 1 115 "int8"
d G "BOOLEAN" 1 116 "int1"
d G "getc" 1 118 "getch"
d G "fgetc" 1 119 "getch"
d G "getchar" 1 120 "getch"
d G "putc" 1 121 "putchar"
d G "fputc" 1 122 "putchar"
d G "fgets" 1 123 "gets"
d G "fputs" 1 124 "puts"
c L "output_drive" 1 3 3 "FUNCTION"
f N "restart_cause" 1 129 ""
f B "restart_cause" 1 129 "int8()" `105 
f N "reset_cpu" 1 130 ""
f B "reset_cpu" 1 130 "void()" `106 
f N "sleep" 1 131 ""
f B "sleep" 1 131 "void()" `107  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_FROM_SLEEP" 1 133 "3"
d G "WDT_TIMEOUT" 1 134 "11"
d G "MCLR_FROM_SLEEP" 1 135 "19"
d G "MCLR_FROM_RUN" 1 136 "27"
d G "NORMAL_POWER_UP" 1 137 "25"
d G "BROWNOUT_RESTART" 1 138 "26"
c L "sleep" 1 3 5 "FUNCTION"
f N "setup_timer_0" 1 145 ""
v L "mode" 1 145 "int8" `109 
f B "setup_timer_0" 1 145 "void(int8 mode)" `108 
f N "set_timer0" 1 146 ""
v L "value" 1 146 "int8" `111 
f B "set_timer0" 1 146 "void(int8 value)" `110 
f N "get_timer0" 1 147 ""
f B "get_timer0" 1 147 "int8()" `112 
f N "setup_counters" 1 148 ""
v L "mode" 1 148 "int8" `114 
v L "prescaler" 1 148 "int8" `115 
f B "setup_counters" 1 148 "void(int8 mode,int8 prescaler)" `113 
f N "set_rtcc" 1 149 ""
v L "value" 1 149 "int8" `117 
f B "set_rtcc" 1 149 "void(int8 value)" `116 
f N "get_rtcc" 1 150 ""
f B "get_rtcc" 1 150 "int8()" `118  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 1 152 "0"
d G "T0_EXT_L_TO_H" 1 153 "32"
d G "T0_EXT_H_TO_L" 1 154 "48"
d G "T0_DIV_1" 1 156 "8"
d G "T0_DIV_2" 1 157 "0"
d G "T0_DIV_4" 1 158 "1"
d G "T0_DIV_8" 1 159 "2"
d G "T0_DIV_16" 1 160 "3"
d G "T0_DIV_32" 1 161 "4"
d G "T0_DIV_64" 1 162 "5"
d G "T0_DIV_128" 1 163 "6"
d G "T0_DIV_256" 1 164 "7"
d G "T0_8_BIT" 1 167 "0"
d G "RTCC_INTERNAL" 1 169 "0" "The following are provided for compatibility"
d G "RTCC_EXT_L_TO_H" 1 170 "32" "with older compiler versions"
d G "RTCC_EXT_H_TO_L" 1 171 "48"
d G "RTCC_DIV_1" 1 172 "8"
d G "RTCC_DIV_2" 1 173 "0"
d G "RTCC_DIV_4" 1 174 "1"
d G "RTCC_DIV_8" 1 175 "2"
d G "RTCC_DIV_16" 1 176 "3"
d G "RTCC_DIV_32" 1 177 "4"
d G "RTCC_DIV_64" 1 178 "5"
d G "RTCC_DIV_128" 1 179 "6"
d G "RTCC_DIV_256" 1 180 "7"
d G "RTCC_8_BIT" 1 181 "0"
c L "get_rtcc" 1 3 8 "FUNCTION"
f N "setup_wdt" 1 192 ""
v L "mode" 1 192 "int16" `120 
f B "setup_wdt" 1 192 "void(int16 mode)" `119 
f N "restart_wdt" 1 193 ""
f B "restart_wdt" 1 193 "void()" `121  "Constants used for SETUP_WDT() are:"
d G "WDT_18MS" 1 196 "8"
d G "WDT_36MS" 1 197 "9"
d G "WDT_72MS" 1 198 "10"
d G "WDT_144MS" 1 199 "11"
d G "WDT_288MS" 1 200 "12"
d G "WDT_576MS" 1 201 "13"
d G "WDT_1152MS" 1 202 "14"
d G "WDT_2304MS" 1 203 "15"
c L "restart_wdt" 1 3 3 "FUNCTION"
f N "setup_timer_1" 1 209 ""
v L "mode" 1 209 "int16" `123 
f B "setup_timer_1" 1 209 "void(int16 mode)" `122 
f N "get_timer1" 1 210 ""
f B "get_timer1" 1 210 "int16()" `124 
f N "set_timer1" 1 211 ""
v L "value" 1 211 "int16" `126 
f B "set_timer1" 1 211 "void(int16 value)" `125  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 1 214 "0"
d G "T1_INTERNAL" 1 215 "0x85"
d G "T1_EXTERNAL" 1 216 "0x87"
d G "T1_EXTERNAL_SYNC" 1 217 "0x83"
d G "T1_CLK_OUT" 1 219 "8"
d G "T1_DIV_BY_1" 1 221 "0"
d G "T1_DIV_BY_2" 1 222 "0x10"
d G "T1_DIV_BY_4" 1 223 "0x20"
d G "T1_DIV_BY_8" 1 224 "0x30"
c L "set_timer1" 1 3 3 "FUNCTION"
f N "setup_timer_2" 1 229 ""
v L "mode" 1 229 "int8" `128 
v L "period" 1 229 "int8" `129 
v L "postscale" 1 229 "int8" `130 
f B "setup_timer_2" 1 229 "void(int8 mode,int8 period,int8 postscale)" `127 
f N "get_timer2" 1 230 ""
f B "get_timer2" 1 230 "int8()" `131 
f N "set_timer2" 1 231 ""
v L "value" 1 231 "int8" `133 
f B "set_timer2" 1 231 "void(int8 value)" `132  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 1 233 "0"
d G "T2_DIV_BY_1" 1 234 "4"
d G "T2_DIV_BY_4" 1 235 "5"
d G "T2_DIV_BY_16" 1 236 "6"
c L "set_timer2" 1 3 4 "FUNCTION"
f N "setup_ccp1" 1 242 ""
v L "mode" 1 242 "int32" `135 
f B "setup_ccp1" 1 242 "void(int32 mode)" `134 
f N "setup_ccp1" 1 243 ""
v L "mode" 1 243 "int32" `137 
v L "pwm" 1 243 "int8" `138 
f B "setup_ccp1" 1 243 "void(int32 mode,int8 pwm)" `136 
f N "set_pwm1_duty" 1 244 ""
v L "value" 1 244 "int16" `140 
f B "set_pwm1_duty" 1 244 "void(int16 value)" `139  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 1 246 "0"
d G "CCP_CAPTURE_FE" 1 247 "0x04"
d G "CCP_CAPTURE_RE" 1 248 "0x05"
d G "CCP_CAPTURE_DIV_4" 1 249 "0x06"
d G "CCP_CAPTURE_DIV_16" 1 250 "0x07"
d G "CCP_COMPARE_SET_ON_MATCH" 1 251 "0x08"
d G "CCP_COMPARE_CLR_ON_MATCH" 1 252 "0x09"
d G "CCP_COMPARE_INT" 1 253 "0x0A"
d G "CCP_COMPARE_RESET_TIMER" 1 254 "0x0B"
d G "CCP_PWM" 1 255 "0x0C"
d G "CCP_PWM_PLUS_1" 1 256 "0x1c"
d G "CCP_PWM_PLUS_2" 1 257 "0x2c"
d G "CCP_PWM_PLUS_3" 1 258 "0x3c"
c L "set_pwm1_duty" 1 3 1 "FUNCTION"
f N "setup_ccp2" 1 265 ""
v L "mode" 1 265 "int32" `145 
f B "setup_ccp2" 1 265 "void(int32 mode)" `144 
f N "setup_ccp2" 1 266 ""
v L "mode" 1 266 "int32" `147 
v L "pwm" 1 266 "int8" `148 
f B "setup_ccp2" 1 266 "void(int32 mode,int8 pwm)" `146 
f N "set_pwm2_duty" 1 267 ""
v L "value" 1 267 "int16" `150 
f B "set_pwm2_duty" 1 267 "void(int16 value)" `149 
c L "set_pwm2_duty" 1 3 5 "FUNCTION"
f N "setup_psp" 1 276 ""
v L "mode" 1 276 "int8" `155 
f B "setup_psp" 1 276 "void(int8 mode)" `154 
f N "psp_output_full" 1 277 ""
f B "psp_output_full" 1 277 "int8()" `156 
f N "psp_input_full" 1 278 ""
f B "psp_input_full" 1 278 "int8()" `157 
f N "psp_overflow" 1 279 ""
f B "psp_overflow" 1 279 "int8()" `158  "Constants used in SETUP_PSP() are:"
d G "PSP_ENABLED" 1 281 "0x10"
d G "PSP_DISABLED" 1 282 "0"
c L "psp_overflow" 1 3 3 "FUNCTION"
f N "setup_spi" 1 289 ""
v L "mode" 1 289 "int32" `161 
f B "setup_spi" 1 289 "void(int32 mode)" `160 
f N "spi_write" 1 290 ""
v L "value" 1 290 "int8" `163 
f B "spi_write" 1 290 "void(int8 value)" `162 
f N "spi_read" 1 291 ""
f B "spi_read" 1 291 "int8()" `164 
f N "spi_read" 1 292 ""
v L "value" 1 292 "int8" `166 
f B "spi_read" 1 292 "int8(int8 value)" `165 
f N "spi_data_in" 1 293 ""
f B "spi_data_in" 1 293 "int8()" `167  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 1 295 "0x00"
d G "SPI_MASTER" 1 296 "0x20"
d G "SPI_SLAVE" 1 297 "0x24"
d G "SPI_SCK_IDLE_HIGH" 1 298 "0x10"
d G "SPI_SCK_IDLE_LOW" 1 299 "0x00"
d G "SPI_CLK_DIV_4" 1 300 "0x00"
d G "SPI_CLK_DIV_16" 1 301 "0x01"
d G "SPI_CLK_DIV_64" 1 302 "0x02"
d G "SPI_CLK_T2" 1 303 "0x03"
d G "SPI_SS_DISABLED" 1 304 "0x01"
d G "SPI_XMIT_L_TO_H" 1 306 "0x4000"
d G "SPI_XMIT_H_TO_L" 1 307 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 1 309 "0x0000"
d G "SPI_SAMPLE_AT_END" 1 310 "0x8000"
d G "SPI_L_TO_H" 1 313 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 1 314 "SPI_SCK_IDLE_HIGH"
c L "spi_data_in" 1 3 2 "FUNCTION"
f N "setup_uart" 1 318 ""
v L "baud" 1 318 "int32" `169 
f B "setup_uart" 1 318 "void(int32 baud)" `168 
f N "setup_uart" 1 319 ""
v L "baud" 1 319 "int32" `171 
v L "stream" 1 319 "int8" `172 
f B "setup_uart" 1 319 "void(int32 baud,int8 stream)" `170 
f N "setup_uart" 1 320 ""
v L "baud" 1 320 "int32" `174 
v L "stream" 1 320 "int8" `175 
v L "clock" 1 320 "int32" `176 
f B "setup_uart" 1 320 "void(int32 baud,int8 stream,int32 clock)" `173 
f N "set_uart_speed" 1 321 ""
v L "baud" 1 321 "int32" `178 
f B "set_uart_speed" 1 321 "void(int32 baud)" `177 
f N "set_uart_speed" 1 322 ""
v L "baud" 1 322 "int32" `180 
v L "stream" 1 322 "int8" `181 
f B "set_uart_speed" 1 322 "void(int32 baud,int8 stream)" `179 
f N "set_uart_speed" 1 323 ""
v L "baud" 1 323 "int32" `183 
v L "stream" 1 323 "int8" `184 
v L "clock" 1 323 "int32" `185 
f B "set_uart_speed" 1 323 "void(int32 baud,int8 stream,int32 clock)" `182  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 1 327 "2"
d G "UART_DATA" 1 328 "4"
c L "set_uart_speed" 1 3 3 "FUNCTION"
f N "setup_comparator" 1 332 ""
v L "mode" 1 332 "int32" `187 
f B "setup_comparator" 1 332 "void(int32 mode)" `186  "Constants used in setup_comparator() are:"
d G "A0_A3_A1_A3" 1 334 "0xfff04"
d G "A0_A3_A1_A2_OUT_ON_A4_A5" 1 335 "0xfcf03"
d G "A0_A3_A1_A3_OUT_ON_A4_A5" 1 336 "0xbcf05"
d G "NC_NC_NC_NC" 1 337 "0x0ff07"
d G "A0_A3_A1_A2" 1 338 "0xfff02"
d G "A0_A3_NC_NC_OUT_ON_A4" 1 339 "0x9ef01"
d G "A0_VR_A1_VR" 1 340 "0x3ff06"
d G "A3_VR_A2_VR" 1 341 "0xcff0e"
d G "CP1_INVERT" 1 342 "0x0000010"
d G "CP2_INVERT" 1 343 "0x0000020"
c L "setup_comparator" 1 3 2 "FUNCTION"
f N "setup_vref" 1 350 ""
v L "mode" 1 350 "int8" `191 
f B "setup_vref" 1 350 "void(int8 mode)" `190  "Constants used in setup_vref() are:"
d G "VREF_LOW" 1 352 "0xa0"
d G "VREF_HIGH" 1 353 "0x80"
d G "VREF_A2" 1 355 "0x40"
c L "setup_vref" 1 3 4 "FUNCTION"
f N "setup_adc" 1 363 ""
v L "mode" 1 363 "int32" `193 
f B "setup_adc" 1 363 "void(int32 mode)" `192 
f N "read_adc" 1 364 ""
f B "read_adc" 1 364 "int8()" `194 
f N "read_adc" 1 365 ""
v L "mode" 1 365 "int8" `196 
f B "read_adc" 1 365 "int8(int8 mode)" `195 
f N "read_adc" 1 366 ""
f G "read_adc" 1 366 "int16()" `197 
f N "read_adc" 1 367 ""
v L "mode" 1 367 "int8" `198 
f G "read_adc" 1 367 "int16(int8 mode,int8 setting)" `197 
f N "adc_done" 1 368 ""
f B "adc_done" 1 368 "int8(int8 mode,int8 setting)" `197  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 1 370 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 1 371 "0x10000"
d G "ADC_CLOCK_DIV_4" 1 372 "0x4000"
d G "ADC_CLOCK_DIV_8" 1 373 "0x0040"
d G "ADC_CLOCK_DIV_16" 1 374 "0x4040"
d G "ADC_CLOCK_DIV_32" 1 375 "0x0080"
d G "ADC_CLOCK_DIV_64" 1 376 "0x4080"
d G "ADC_CLOCK_INTERNAL" 1 377 "0x00c0" "Internal 2-6us"
c L "adc_done" 1 3 1 "FUNCTION"
f N "setup_adc_ports" 1 380 ""
v L "setting" 1 380 "int8" `199 
f B "setup_adc_ports" 1 380 "void(int8 setting)" `198 
f N "set_adc_channel" 1 381 ""
v L "channel" 1 381 "int8" `201 
f B "set_adc_channel" 1 381 "void(int8 channel)" `200  "Constants used in SETUP_ADC_PORTS() are:"
d G "NO_ANALOGS" 1 383 "7" "None"
d G "ALL_ANALOG" 1 384 "0" "A0 A1 A2 A3 A5 E0 E1 E2"
d G "AN0_AN1_AN2_AN4_AN5_AN6_AN7_VSS_VREF" 1 385 "1" "A0 A1 A2 A5 E0 E1 E2 VRefh=A3"
d G "AN0_AN1_AN2_AN3_AN4" 1 386 "2" "A0 A1 A2 A3 A5"
d G "AN0_AN1_AN2_AN4_VSS_VREF" 1 387 "3" "A0 A1 A2 A4 VRefh=A3"
d G "AN0_AN1_AN3" 1 388 "4" "A0 A1 A3"
d G "AN0_AN1_VSS_VREF" 1 389 "5" "A0 A1 VRefh=A3"
d G "AN0_AN1_AN4_AN5_AN6_AN7_VREF_VREF" 1 390 "0x08" "A0 A1 A5 E0 E1 E2 VRefh=A3 VRefl=A2"
d G "AN0_AN1_AN2_AN3_AN4_AN5" 1 391 "0x09" "A0 A1 A2 A3 A5 E0"
d G "AN0_AN1_AN2_AN4_AN5_VSS_VREF" 1 392 "0x0A" "A0 A1 A2 A5 E0 VRefh=A3"
d G "AN0_AN1_AN4_AN5_VREF_VREF" 1 393 "0x0B" "A0 A1 A5 E0 VRefh=A3 VRefl=A2"
d G "AN0_AN1_AN4_VREF_VREF" 1 394 "0x0C" "A0 A1 A4 VRefh=A3 VRefl=A2"
d G "AN0_AN1_VREF_VREF" 1 395 "0x0D" "A0 A1 VRefh=A3 VRefl=A2"
d G "AN0" 1 396 "0x0E" "A0"
d G "AN0_VREF_VREF" 1 397 "0x0F" "A0 VRefh=A3 VRefl=A2"
d G "ANALOG_RA3_REF" 1 398 "0x1" "!old only provided for compatibility"
d G "A_ANALOG" 1 399 "0x2" "!old only provided for compatibility"
d G "A_ANALOG_RA3_REF" 1 400 "0x3" "!old only provided for compatibility"
d G "RA0_RA1_RA3_ANALOG" 1 401 "0x4" "!old only provided for compatibility"
d G "RA0_RA1_ANALOG_RA3_REF" 1 402 "0x5" "!old only provided for compatibility"
d G "ANALOG_RA3_RA2_REF" 1 403 "0x8" "!old only provided for compatibility"
d G "ANALOG_NOT_RE1_RE2" 1 404 "0x9" "!old only provided for compatibility"
d G "ANALOG_NOT_RE1_RE2_REF_RA3" 1 405 "0xA" "!old only provided for compatibility"
d G "ANALOG_NOT_RE1_RE2_REF_RA3_RA2" 1 406 "0xB" "!old only provided for compatibility"
d G "A_ANALOG_RA3_RA2_REF" 1 407 "0xC" "!old only provided for compatibility"
d G "RA0_RA1_ANALOG_RA3_RA2_REF" 1 408 "0xD" "!old only provided for compatibility"
d G "RA0_ANALOG" 1 409 "0xE" "!old only provided for compatibility"
d G "RA0_ANALOG_RA3_RA2_REF" 1 410 "0xF" "!old only provided for compatibility"
d G "ADC_START_AND_READ" 1 413 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 1 414 "1"
d G "ADC_READ_ONLY" 1 415 "6"
c L "set_adc_channel" 1 3 3 "FUNCTION"
f N "abs" 1 421 ""
v L "x" 1 421 "sint8" `203 
f B "abs" 1 421 "sint8(sint8 x)" `202 
f N "abs" 1 422 ""
v L "x" 1 422 "sint16" `205 
f B "abs" 1 422 "sint16(sint16 x)" `204 
f N "abs" 1 423 ""
v L "x" 1 423 "sint32" `207 
f B "abs" 1 423 "sint32(sint32 x)" `206 
f N "abs" 1 424 ""
v L "x" 1 424 "float" `209 
f B "abs" 1 424 "float(float x)" `208 
f N "_mul" 1 425 ""
v L "??65535" 1 425 "int8" `211 
v L "??65535" 1 425 "int8" `212 
f B "_mul" 1 425 "int16(int8 ,int8 )" `210 
f N "_mul" 1 426 ""
v L "??65535" 1 426 "sint8" `214 
v L "??65535" 1 426 "sint8" `215 
f B "_mul" 1 426 "sint16(sint8 ,sint8 )" `213 
f N "_mul" 1 427 ""
v L "??65535" 1 427 "int16" `217 
v L "??65535" 1 427 "int16" `218 
f B "_mul" 1 427 "int32(int16 ,int16 )" `216 
f N "_mul" 1 428 ""
v L "??65535" 1 428 "sint16" `220 
v L "??65535" 1 428 "sint16" `221 
f B "_mul" 1 428 "sint32(sint16 ,sint16 )" `219  "Memory Manipulation Prototypes:"
f N "read_bank" 1 431 ""
v L "bank" 1 431 "int8" `223 
v L "offset" 1 431 "int8" `224 
f B "read_bank" 1 431 "int8(int8 bank,int8 offset)" `222 
f N "write_bank" 1 432 ""
v L "bank" 1 432 "int8" `226 
v L "offset" 1 432 "int8" `227 
v L "value" 1 432 "int8" `228 
f B "write_bank" 1 432 "void(int8 bank,int8 offset,int8 value)" `225 
f N "strcpy" 1 433 ""
v L "dest" 1 433 "*int8" `230 
v L "src" 1 433 "*int8" `231 
f B "strcpy" 1 433 "void(*int8 dest,*int8 src)" `229 
f N "strcopy" 1 434 ""
v L "dest" 1 434 "*int8" `233 
v L "src" 1 434 "*int8" `234 
f B "strcopy" 1 434 "void(*int8 dest,*int8 src)" `232 
f N "memset" 1 435 ""
v L "destination" 1 435 "*int8" `236 
v L "value" 1 435 "int8" `237 
v L "num" 1 435 "int16" `238 
f B "memset" 1 435 "void(*int8 destination,int8 value,int16 num)" `235 
f N "memcpy" 1 436 ""
v L "destination" 1 436 "*int8" `240 
v L "source" 1 436 "*int8" `241 
v L "num" 1 436 "int16" `242 
f B "memcpy" 1 436 "void(*int8 destination,*int8 source,int16 num)" `239  "String Prototypes:"
f N "toupper" 1 439 ""
v L "cvalue" 1 439 "int8" `244 
f B "toupper" 1 439 "int8(int8 cvalue)" `243 
f N "tolower" 1 440 ""
v L "cvalue" 1 440 "int8" `246 
f B "tolower" 1 440 "int8(int8 cvalue)" `245 
f N "sprintf" 1 441 ""
v L "string" 1 441 "*int8" `248 
v L "cstring" 1 441 "*int8" `249 
f B "sprintf" 1 441 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `247  "Data Manipulators Prototypes:"
f N "shift_left" 1 444 ""
v L "address" 1 444 "*int8" `252 
v L "bytes" 1 444 "int8" `253 
v L "value" 1 444 "int8" `254 
f B "shift_left" 1 444 "int8(*int8 address,int8 bytes,int8 value)" `251 
f N "shift_right" 1 445 ""
v L "address" 1 445 "*int8" `256 
v L "bytes" 1 445 "int8" `257 
v L "value" 1 445 "int8" `258 
f B "shift_right" 1 445 "int8(*int8 address,int8 bytes,int8 value)" `255 
f N "rotate_left" 1 446 ""
v L "address" 1 446 "*int8" `260 
v L "bytes" 1 446 "int8" `261 
f B "rotate_left" 1 446 "void(*int8 address,int8 bytes)" `259 
f N "rotate_right" 1 447 ""
v L "address" 1 447 "*int8" `263 
v L "bytes" 1 447 "int8" `264 
f B "rotate_right" 1 447 "void(*int8 address,int8 bytes)" `262 
f N "swap" 1 448 ""
v L "value" 1 448 "int8" `266 
f B "swap" 1 448 "void(int8 value)" `265 
f N "make8" 1 449 ""
v L "var" 1 449 "int16" `268 
v L "offset" 1 449 "int8" `269 
f B "make8" 1 449 "int8(int16 var,int8 offset)" `267 
f N "make8" 1 450 ""
v L "var" 1 450 "int32" `271 
v L "offset" 1 450 "int8" `272 
f B "make8" 1 450 "int8(int32 var,int8 offset)" `270 
f N "make16" 1 451 ""
v L "varhigh" 1 451 "int8" `274 
v L "varlow" 1 451 "int8" `275 
f B "make16" 1 451 "int16(int8 varhigh,int8 varlow)" `273 
f N "make32" 1 452 ""
v L "var1" 1 452 "int16" `277 
f B "make32" 1 452 "int32(int16 var1)" `276 
f N "make32" 1 453 ""
v L "var1" 1 453 "int16" `279 
v L "var2" 1 453 "int16" `280 
f B "make32" 1 453 "int32(int16 var1,int16 var2)" `278 
f N "make32" 1 454 ""
v L "var1" 1 454 "int16" `282 
v L "var2" 1 454 "int8" `283 
f B "make32" 1 454 "int32(int16 var1,int8 var2)" `281 
f N "make32" 1 455 ""
v L "var1" 1 455 "int16" `285 
v L "var2" 1 455 "int8" `286 
v L "var3" 1 455 "int8" `287 
f B "make32" 1 455 "int32(int16 var1,int8 var2,int8 var3)" `284 
f N "make32" 1 456 ""
v L "var1" 1 456 "int8" `289 
f B "make32" 1 456 "int32(int8 var1)" `288 
f N "make32" 1 457 ""
v L "var1" 1 457 "int8" `291 
v L "var2" 1 457 "int8" `292 
f B "make32" 1 457 "int32(int8 var1,int8 var2)" `290 
f N "make32" 1 458 ""
v L "var1" 1 458 "int8" `294 
v L "var2" 1 458 "int8" `295 
v L "var3" 1 458 "int8" `296 
f B "make32" 1 458 "int32(int8 var1,int8 var2,int8 var3)" `293 
f N "make32" 1 459 ""
v L "var1" 1 459 "int8" `298 
v L "var2" 1 459 "int8" `299 
v L "var3" 1 459 "int8" `300 
v L "var4" 1 459 "int8" `301 
f B "make32" 1 459 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `297 
f N "make32" 1 460 ""
v L "var1" 1 460 "int8" `303 
v L "var2" 1 460 "int16" `304 
f B "make32" 1 460 "int32(int8 var1,int16 var2)" `302 
f N "make32" 1 461 ""
v L "var1" 1 461 "int8" `306 
v L "var2" 1 461 "int16" `307 
v L "var3" 1 461 "int8" `308 
f B "make32" 1 461 "int32(int8 var1,int16 var2,int8 var3)" `305 
f N "make32" 1 462 ""
v L "var1" 1 462 "int8" `310 
v L "var2" 1 462 "int8" `311 
v L "var3" 1 462 "int16" `312 
f B "make32" 1 462 "int32(int8 var1,int8 var2,int16 var3)" `309 
f N "bit_set" 1 463 ""
v L "var" 1 463 "int8" `314 
v L "bit" 1 463 "int8" `315 
f B "bit_set" 1 463 "void(int8 var,int8 bit)" `313 
f N "bit_set" 1 464 ""
v L "var" 1 464 "int16" `317 
v L "bit" 1 464 "int8" `318 
f B "bit_set" 1 464 "void(int16 var,int8 bit)" `316 
f N "bit_set" 1 465 ""
v L "var" 1 465 "int32" `320 
v L "bit" 1 465 "int8" `321 
f B "bit_set" 1 465 "void(int32 var,int8 bit)" `319 
f N "bit_clear" 1 466 ""
v L "var" 1 466 "int8" `323 
v L "bit" 1 466 "int8" `324 
f B "bit_clear" 1 466 "void(int8 var,int8 bit)" `322 
f N "bit_clear" 1 467 ""
v L "var" 1 467 "int16" `326 
v L "bit" 1 467 "int8" `327 
f B "bit_clear" 1 467 "void(int16 var,int8 bit)" `325 
f N "bit_clear" 1 468 ""
v L "var" 1 468 "int32" `329 
v L "bit" 1 468 "int8" `330 
f B "bit_clear" 1 468 "void(int32 var,int8 bit)" `328 
f N "bit_test" 1 469 ""
v L "var" 1 469 "int8" `332 
v L "bit" 1 469 "int8" `333 
f B "bit_test" 1 469 "int8(int8 var,int8 bit)" `331 
f N "bit_test" 1 470 ""
v L "var" 1 470 "int16" `335 
v L "bit" 1 470 "int8" `336 
f B "bit_test" 1 470 "int8(int16 var,int8 bit)" `334 
f N "bit_test" 1 471 ""
v L "var" 1 471 "int32" `338 
v L "bit" 1 471 "int8" `339 
f B "bit_test" 1 471 "int8(int32 var,int8 bit)" `337  "#use delay() Prototypes:"
f N "delay_cycles" 1 474 ""
v L "count" 1 474 "int8" `341 
f B "delay_cycles" 1 474 "void(int8 count)" `340 
f N "delay_ms" 1 475 ""
v L "time" 1 475 "int16" `343 
f B "delay_ms" 1 475 "void(int16 time)" `342 
f N "delay_us" 1 476 ""
v L "time" 1 476 "int16" `345 
f B "delay_us" 1 476 "void(int16 time)" `344  "#use rs232() Prototypes:"
f N "putchar" 1 479 ""
v L "cdata" 1 479 "int8" `347 
f B "putchar" 1 479 "void(int8 cdata)" `346 
f N "putchar" 1 480 ""
v L "cdata" 1 480 "int8" `349 
v L "stream" 1 480 "int8" `350 
f B "putchar" 1 480 "void(int8 cdata,int8 stream)" `348 
f N "puts" 1 481 ""
v L "string" 1 481 "*int8" `352 
f B "puts" 1 481 "void(*int8 string)" `351 
f N "puts" 1 482 ""
v L "string" 1 482 "*int8" `354 
v L "stream" 1 482 "int8" `355 
f B "puts" 1 482 "void(*int8 string,int8 stream)" `353 
f N "getch" 1 483 ""
f B "getch" 1 483 "int8()" `356 
f N "getch" 1 484 ""
v L "stream" 1 484 "int8" `358 
f B "getch" 1 484 "int8(int8 stream)" `357 
f N "gets" 1 485 ""
v L "string" 1 485 "*int8" `360 
f B "gets" 1 485 "void(*int8 string)" `359 
f N "gets" 1 486 ""
v L "string" 1 486 "*int8" `362 
v L "stream" 1 486 "int8" `363 
f B "gets" 1 486 "void(*int8 string,int8 stream)" `361 
f N "kbhit" 1 487 ""
f B "kbhit" 1 487 "int8()" `364 
f N "kbhit" 1 488 ""
v L "stream" 1 488 "int8" `366 
f B "kbhit" 1 488 "int8(int8 stream)" `365 
f N "printf" 1 489 ""
v L "string" 1 489 "*int8" `368 
f B "printf" 1 489 "void(*int8 string,*int8 _VA_LIST)" `367 
f N "fprintf" 1 490 ""
v L "stream" 1 490 "int8" `371 
v L "string" 1 490 "*int8" `372 
f B "fprintf" 1 490 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `370 
f N "putc_send" 1 491 ""
f B "putc_send" 1 491 "void()" `374 
f N "fputc_send" 1 492 ""
v L "stream" 1 492 "int8" `376 
f B "fputc_send" 1 492 "void(int8 stream)" `375 
f N "rcv_buffer_full" 1 493 ""
f B "rcv_buffer_full" 1 493 "int8()" `377 
f N "rcv_buffer_full" 1 494 ""
v L "stream" 1 494 "int8" `379 
f B "rcv_buffer_full" 1 494 "int8(int8 stream)" `378 
f N "rcv_buffer_bytes" 1 495 ""
f B "rcv_buffer_bytes" 1 495 "int16()" `380 
f N "rcv_buffer_bytes" 1 496 ""
v L "stream" 1 496 "int8" `382 
f B "rcv_buffer_bytes" 1 496 "int16(int8 stream)" `381 
f N "tx_buffer_full" 1 497 ""
f B "tx_buffer_full" 1 497 "int8()" `383 
f N "tx_buffer_full" 1 498 ""
v L "stream" 1 498 "int8" `385 
f B "tx_buffer_full" 1 498 "int8(int8 stream)" `384 
f N "tx_buffer_bytes" 1 499 ""
f B "tx_buffer_bytes" 1 499 "int16()" `386 
f N "tx_buffer_bytes" 1 500 ""
v L "stream" 1 500 "int8" `388 
f B "tx_buffer_bytes" 1 500 "int16(int8 stream)" `387  "#use i2c() Prototypes:"
f N "i2c_read" 1 503 ""
f B "i2c_read" 1 503 "int8()" `389 
f N "i2c_read" 1 504 ""
v L "stream" 1 504 "int8" `391 
f B "i2c_read" 1 504 "int8(int8 stream)" `390 
f N "i2c_read" 1 505 ""
v L "stream" 1 505 "int8" `393 
v L "ack" 1 505 "int8" `394 
f B "i2c_read" 1 505 "int8(int8 stream,int8 ack)" `392 
f N "i2c_write" 1 506 ""
v L "data" 1 506 "int8" `396 
f B "i2c_write" 1 506 "int8(int8 data)" `395 
f N "i2c_write" 1 507 ""
v L "stream" 1 507 "int8" `398 
v L "data" 1 507 "int8" `399 
f B "i2c_write" 1 507 "int8(int8 stream,int8 data)" `397 
f N "i2c_start" 1 508 ""
f B "i2c_start" 1 508 "void()" `400 
f N "i2c_start" 1 509 ""
v L "stream" 1 509 "int8" `402 
f B "i2c_start" 1 509 "void(int8 stream)" `401 
f N "i2c_start" 1 510 ""
v L "stream" 1 510 "int8" `404 
v L "restart" 1 510 "int8" `405 
f B "i2c_start" 1 510 "void(int8 stream,int8 restart)" `403 
f N "i2c_stop" 1 511 ""
f B "i2c_stop" 1 511 "void()" `406 
f N "i2c_stop" 1 512 ""
v L "stream" 1 512 "int8" `408 
f B "i2c_stop" 1 512 "void(int8 stream)" `407 
f N "i2c_isr_state" 1 513 ""
f B "i2c_isr_state" 1 513 "int8()" `409 
f N "i2c_slaveaddr" 1 514 ""
v L "addr" 1 514 "int8" `411 
f B "i2c_slaveaddr" 1 514 "void(int8 addr)" `410 
f N "i2c_slaveaddr" 1 515 ""
v L "stream" 1 515 "int8" `413 
v L "addr" 1 515 "int8" `414 
f B "i2c_slaveaddr" 1 515 "void(int8 stream,int8 addr)" `412 
f N "i2c_poll" 1 516 ""
f B "i2c_poll" 1 516 "int8()" `415 
f N "i2c_poll" 1 517 ""
v L "stream" 1 517 "int8" `417 
f B "i2c_poll" 1 517 "int8(int8 stream)" `416 
f N "i2c_init" 1 518 ""
v L "baud" 1 518 "int32" `419 
f B "i2c_init" 1 518 "void(int32 baud)" `418 
f N "i2c_init" 1 519 ""
v L "stream" 1 519 "int8" `421 
v L "baud" 1 519 "int32" `422 
f B "i2c_init" 1 519 "void(int8 stream,int32 baud)" `420  "#use spi() Prototypes:"
f N "spi_xfer" 1 522 ""
f B "spi_xfer" 1 522 "int8()" `423 
f N "spi_xfer" 1 523 ""
f G "spi_xfer" 1 523 "int16(int8 data)" `424 
f N "spi_xfer" 1 524 ""
f G "spi_xfer" 1 524 "int32(int8 data)" `424 
f N "spi_xfer" 1 525 ""
v L "data" 1 525 "int8" `425 
f B "spi_xfer" 1 525 "int8(int8 data)" `424 
f N "spi_xfer" 1 526 ""
v L "data" 1 526 "int16" `427 
f B "spi_xfer" 1 526 "int16(int16 data)" `426 
f N "spi_xfer" 1 527 ""
v L "data" 1 527 "int32" `429 
f B "spi_xfer" 1 527 "int32(int32 data)" `428 
f N "spi_xfer" 1 528 ""
v L "stream" 1 528 "int8" `431 
v L "data" 1 528 "int8" `432 
f B "spi_xfer" 1 528 "int8(int8 stream,int8 data)" `430 
f N "spi_xfer" 1 529 ""
v L "stream" 1 529 "int8" `434 
v L "data" 1 529 "int16" `435 
f B "spi_xfer" 1 529 "int16(int8 stream,int16 data)" `433 
f N "spi_xfer" 1 530 ""
v L "stream" 1 530 "int8" `437 
v L "data" 1 530 "int32" `438 
f B "spi_xfer" 1 530 "int32(int8 stream,int32 data)" `436 
f N "spi_xfer" 1 531 ""
v L "stream" 1 531 "int8" `440 
v L "data" 1 531 "int8" `441 
v L "bits" 1 531 "int8" `442 
f B "spi_xfer" 1 531 "int8(int8 stream,int8 data,int8 bits)" `439 
f N "spi_xfer" 1 532 ""
v L "stream" 1 532 "int8" `444 
v L "data" 1 532 "int16" `445 
v L "bits" 1 532 "int8" `446 
f B "spi_xfer" 1 532 "int16(int8 stream,int16 data,int8 bits)" `443 
f N "spi_xfer" 1 533 ""
v L "stream" 1 533 "int8" `448 
v L "data" 1 533 "int32" `449 
v L "bits" 1 533 "int8" `450 
f B "spi_xfer" 1 533 "int32(int8 stream,int32 data,int8 bits)" `447 
f N "spi_init" 1 534 ""
v L "baud" 1 534 "int32" `452 
f B "spi_init" 1 534 "void(int32 baud)" `451 
f N "spi_init" 1 535 ""
v L "stream" 1 535 "int8" `454 
v L "baud" 1 535 "int32" `455 
f B "spi_init" 1 535 "void(int8 stream,int32 baud)" `453 
f N "spi_speed" 1 536 ""
v L "baud" 1 536 "int32" `457 
f B "spi_speed" 1 536 "void(int32 baud)" `456 
f N "spi_speed" 1 537 ""
v L "stream" 1 537 "int8" `459 
v L "baud" 1 537 "int32" `460 
f B "spi_speed" 1 537 "void(int8 stream,int32 baud)" `458 
f N "spi_speed" 1 538 ""
v L "stream" 1 538 "int8" `462 
v L "baud" 1 538 "int32" `463 
v L "clock" 1 538 "int32" `464 
f B "spi_speed" 1 538 "void(int8 stream,int32 baud,int32 clock)" `461 
f N "spi_prewrite" 1 539 ""
v L "data" 1 539 "int8" `466 
f B "spi_prewrite" 1 539 "void(int8 data)" `465 
f N "spi_prewrite" 1 540 ""
v L "data" 1 540 "int16" `468 
f B "spi_prewrite" 1 540 "void(int16 data)" `467 
f N "spi_prewrite" 1 541 ""
v L "data" 1 541 "int32" `470 
f B "spi_prewrite" 1 541 "void(int32 data)" `469 
f N "spi_prewrite" 1 542 ""
v L "??65535" 1 542 "int8" `472 
v L "data" 1 542 "int8" `473 
f B "spi_prewrite" 1 542 "void(int8 ,int8 data)" `471 
f N "spi_prewrite" 1 543 ""
v L "??65535" 1 543 "int8" `475 
v L "data" 1 543 "int16" `476 
f B "spi_prewrite" 1 543 "void(int8 ,int16 data)" `474 
f N "spi_prewrite" 1 544 ""
v L "??65535" 1 544 "int8" `478 
v L "data" 1 544 "int32" `479 
f B "spi_prewrite" 1 544 "void(int8 ,int32 data)" `477 
f N "spi_xfer_in" 1 545 ""
f B "spi_xfer_in" 1 545 "int8()" `480 
f N "spi_xfer_in" 1 546 ""
f G "spi_xfer_in" 1 546 "int16(int8 bits)" `481 
f N "spi_xfer_in" 1 547 ""
f G "spi_xfer_in" 1 547 "int32(int8 bits)" `481 
f N "spi_xfer_in" 1 548 ""
v L "bits" 1 548 "int8" `482 
f B "spi_xfer_in" 1 548 "int8(int8 bits)" `481 
f N "spi_xfer_in" 1 549 ""
v L "bits" 1 549 "int8" `484 
f G "spi_xfer_in" 1 549 "int16(int8 bits,int8 bits)" `483 
f N "spi_xfer_in" 1 550 ""
v L "bits" 1 550 "int8" `484 
f G "spi_xfer_in" 1 550 "int32(int8 bits,int8 bits)" `483 
f N "spi_xfer_in" 1 551 ""
v L "stream" 1 551 "int8" `484 
v L "bits" 1 551 "int8" `485 
f B "spi_xfer_in" 1 551 "int8(int8 stream,int8 bits)" `483 
f N "spi_xfer_in" 1 552 ""
v L "stream" 1 552 "int8" `484 
v L "bits" 1 552 "int8" `488 
f G "spi_xfer_in" 1 552 "int16(int8 stream,int8 bits,int8 task)" `486 
f N "spi_xfer_in" 1 553 ""
v L "stream" 1 553 "int8" `484 
v L "bits" 1 553 "int8" `488 
f G "spi_xfer_in" 1 553 "int32(int8 stream,int8 bits,int8 task)" `486  "#use rtos() Prototypes:"
f N "rtos_run" 1 556 ""
f B "rtos_run" 1 556 "void(int8 stream,int8 bits,int8 task)" `486 
f N "rtos_yield" 1 557 ""
f B "rtos_yield" 1 557 "void(int8 bits,int8 task)" `487 
f N "rtos_enable" 1 558 ""
v L "task" 1 558 "int8" `489 
f B "rtos_enable" 1 558 "void(int8 task)" `488 
f N "rtos_disable" 1 559 ""
v L "task" 1 559 "int8" `491 
f B "rtos_disable" 1 559 "void(int8 task)" `490 
f N "rtos_terminate" 1 560 ""
f B "rtos_terminate" 1 560 "void()" `492 
f N "rtos_await" 1 561 ""
v L "flag" 1 561 "int8" `494 
f B "rtos_await" 1 561 "void(int8 flag)" `493 
f N "rtos_wait" 1 562 ""
v L "sem" 1 562 "int8" `496 
f B "rtos_wait" 1 562 "void(int8 sem)" `495 
f N "rtos_signal" 1 563 ""
v L "sem" 1 563 "int8" `498 
f B "rtos_signal" 1 563 "void(int8 sem)" `497 
f N "rtos_msg_send" 1 564 ""
v L "task" 1 564 "int8" `500 
v L "msg" 1 564 "int8" `501 
f B "rtos_msg_send" 1 564 "void(int8 task,int8 msg)" `499 
f N "rtos_msg_read" 1 565 ""
f B "rtos_msg_read" 1 565 "int8()" `502 
f N "rtos_msg_poll" 1 566 ""
f B "rtos_msg_poll" 1 566 "int8()" `503 
f N "rtos_overrun" 1 567 ""
v L "task" 1 567 "int8" `505 
f B "rtos_overrun" 1 567 "int8(int8 task)" `504 
f N "rtos_stats" 1 568 ""
v L "task" 1 568 "int8" `507 
v L "stat" 1 568 "*int8" `508 
f B "rtos_stats" 1 568 "void(int8 task,*int8 stat)" `506  "#use timer() Prototypes:"
f N "get_ticks" 1 571 ""
f B "get_ticks" 1 571 "int8()" `509 
f N "get_ticks" 1 572 ""
f G "get_ticks" 1 572 "int16(int8 stream)" `510 
f N "get_ticks" 1 573 ""
f G "get_ticks" 1 573 "int32(int8 stream)" `510 
f N "get_ticks" 1 574 ""
v L "stream" 1 574 "int8" `511 
f B "get_ticks" 1 574 "int8(int8 stream)" `510 
f N "get_ticks" 1 575 ""
v L "stream" 1 575 "int8" `513 
f G "get_ticks" 1 575 "int16(int8 stream)" `512 
f N "get_ticks" 1 576 ""
v L "stream" 1 576 "int8" `513 
f G "get_ticks" 1 576 "int32(int8 stream)" `512 
f N "set_ticks" 1 577 ""
v L "value" 1 577 "int8" `513 
f B "set_ticks" 1 577 "void(int8 value)" `512 
f N "set_ticks" 1 578 ""
v L "value" 1 578 "int16" `515 
f B "set_ticks" 1 578 "void(int16 value)" `514 
f N "set_ticks" 1 579 ""
v L "value" 1 579 "int32" `517 
f B "set_ticks" 1 579 "void(int32 value)" `516 
f N "set_ticks" 1 580 ""
v L "stream" 1 580 "int8" `519 
v L "value" 1 580 "int8" `520 
f B "set_ticks" 1 580 "void(int8 stream,int8 value)" `518 
f N "set_ticks" 1 581 ""
v L "stream" 1 581 "int8" `522 
v L "value" 1 581 "int16" `523 
f B "set_ticks" 1 581 "void(int8 stream,int16 value)" `521 
f N "set_ticks" 1 582 ""
v L "stream" 1 582 "int8" `525 
v L "value" 1 582 "int32" `526 
f B "set_ticks" 1 582 "void(int8 stream,int32 value)" `524  "#use pwm() Prototypes:"
f N "pwm_on" 1 585 ""
f B "pwm_on" 1 585 "void()" `527 
f N "pwm_on" 1 586 ""
v L "stream" 1 586 "int8" `529 
f B "pwm_on" 1 586 "void(int8 stream)" `528 
f N "pwm_off" 1 587 ""
f B "pwm_off" 1 587 "void()" `530 
f N "pwm_off" 1 588 ""
v L "stream" 1 588 "int8" `532 
f B "pwm_off" 1 588 "void(int8 stream)" `531 
f N "pwm_set_duty" 1 589 ""
v L "duty" 1 589 "int16" `534 
f B "pwm_set_duty" 1 589 "void(int16 duty)" `533 
f N "pwm_set_duty" 1 590 ""
v L "stream" 1 590 "int8" `536 
v L "duty" 1 590 "int16" `537 
f B "pwm_set_duty" 1 590 "void(int8 stream,int16 duty)" `535 
f N "pwm_set_duty_percent" 1 591 ""
v L "percent" 1 591 "int16" `539 
f B "pwm_set_duty_percent" 1 591 "void(int16 percent)" `538 
f N "pwm_set_duty_percent" 1 592 ""
v L "stream" 1 592 "int8" `541 
v L "percent" 1 592 "int16" `542 
f B "pwm_set_duty_percent" 1 592 "void(int8 stream,int16 percent)" `540 
f N "pwm_set_frequency" 1 593 ""
v L "frequency" 1 593 "int32" `544 
f B "pwm_set_frequency" 1 593 "void(int32 frequency)" `543 
f N "pwm_set_frequency" 1 594 ""
v L "stream" 1 594 "int8" `546 
v L "frequency" 1 594 "int32" `547 
f B "pwm_set_frequency" 1 594 "void(int8 stream,int32 frequency)" `545  "#use capture() Prototypes:"
f N "get_capture_time" 1 597 ""
f B "get_capture_time" 1 597 "int16()" `548 
f N "get_capture_time" 1 598 ""
v L "stream" 1 598 "int8" `550 
f B "get_capture_time" 1 598 "int16(int8 stream)" `549 
f N "get_capture_event" 1 599 ""
f B "get_capture_event" 1 599 "int8()" `551 
f N "get_capture_event" 1 600 ""
v L "stream" 1 600 "int8" `553 
f B "get_capture_event" 1 600 "int8(int8 stream)" `552  "Enviroment Prototypes:"
c L "get_capture_event" 1 3 2 "FUNCTION"
f N "goto_address" 1 613 ""
v L "address" 1 613 "int16" `555 
f B "goto_address" 1 613 "void(int16 address)" `554 
f N "label_address" 1 614 ""
v L "label" 1 614 "int16" `557 
f B "label_address" 1 614 "int16(int16 label)" `556  "Program Memory Prototypes:"
f N "read_program_memory" 1 617 ""
v L "address" 1 617 "int16" `559 
v L "dataptr" 1 617 "*int8" `560 
v L "count" 1 617 "int16" `561 
f B "read_program_memory" 1 617 "void(int16 address,*int8 dataptr,int16 count)" `558 
f N "read_program_eeprom" 1 618 ""
v L "address" 1 618 "int16" `563 
f B "read_program_eeprom" 1 618 "int16(int16 address)" `562 
f N "erase_program_eeprom" 1 619 ""
v L "address" 1 619 "int16" `565 
f B "erase_program_eeprom" 1 619 "void(int16 address)" `564 
f N "write_program_memory" 1 620 ""
v L "address" 1 620 "int16" `567 
v L "dataptr" 1 620 "*int8" `568 
v L "count" 1 620 "int16" `569 
f B "write_program_memory" 1 620 "void(int16 address,*int8 dataptr,int16 count)" `566 
f N "write_program_eeprom" 1 621 ""
v L "address" 1 621 "int16" `571 
v L "data" 1 621 "int16" `572 
f B "write_program_eeprom" 1 621 "void(int16 address,int16 data)" `570  "EEPROM Prototypes:"
t G "__EEADDRESS__" 1 626 "int16" `573 
f N "read_eeprom" 1 631 ""
v L "address" 1 631 "__EEADDRESS__" `575 
f B "read_eeprom" 1 631 "int8(__EEADDRESS__ address)" `574 
f N "write_eeprom" 1 632 ""
v L "address" 1 632 "__EEADDRESS__" `577 
v L "value" 1 632 "int8" `578 
f B "write_eeprom" 1 632 "void(__EEADDRESS__ address,int8 value)" `576  "INT"
c L "write_eeprom" 1 3 4 "FUNCTION"
f N "enable_interrupts" 1 639 ""
v L "interrupt" 1 639 "int32" `580 
f B "enable_interrupts" 1 639 "void(int32 interrupt)" `579 
f N "disable_interrupts" 1 640 ""
v L "interrupt" 1 640 "int32" `582 
f B "disable_interrupts" 1 640 "void(int32 interrupt)" `581 
f N "clear_interrupt" 1 641 ""
v L "interrupt" 1 641 "int32" `584 
f B "clear_interrupt" 1 641 "void(int32 interrupt)" `583 
f N "interrupt_active" 1 642 ""
v L "interrupt" 1 642 "int32" `586 
f B "interrupt_active" 1 642 "int8(int32 interrupt)" `585 
f N "interrupt_enabled" 1 643 ""
v L "interrupt" 1 643 "int32" `588 
f B "interrupt_enabled" 1 643 "int8(int32 interrupt)" `587 
f N "ext_int_edge" 1 644 ""
v L "source" 1 644 "int8" `590 
v L "edge" 1 644 "int8" `591 
f B "ext_int_edge" 1 644 "void(int8 source,int8 edge)" `589 
f N "jump_to_isr" 1 645 ""
v L "address" 1 645 "int16" `593 
f B "jump_to_isr" 1 645 "void(int16 address)" `592  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 1 647 "0x40"
d G "H_TO_L" 1 648 "0"
d G "GLOBAL" 1 650 "0x0BC0"
d G "PERIPH" 1 651 "0x0B40"
d G "INT_RTCC" 1 652 "0x000B20"
d G "INT_RB" 1 653 "0x00FF0B08"
d G "INT_EXT_L2H" 1 654 "0x50000B10"
d G "INT_EXT_H2L" 1 655 "0x60000B10"
d G "INT_EXT" 1 656 "0x000B10"
d G "INT_AD" 1 657 "0x008C40"
d G "INT_TBE" 1 658 "0x008C10"
d G "INT_RDA" 1 659 "0x008C20"
d G "INT_TIMER1" 1 660 "0x008C01"
d G "INT_TIMER2" 1 661 "0x008C02"
d G "INT_CCP1" 1 662 "0x008C04"
d G "INT_CCP2" 1 663 "0x008D01"
d G "INT_SSP" 1 664 "0x008C08"
d G "INT_PSP" 1 665 "0x008C80"
d G "INT_BUSCOL" 1 666 "0x008D08"
d G "INT_EEPROM" 1 667 "0x008D10"
d G "INT_TIMER0" 1 668 "0x000B20"
d G "INT_COMP" 1 669 "0x008D40"
D G "LCD_ADDR" 2 5 "0x7E" "0x4E        //I2C slave address for LCD module"
V G "lcd_total_rows" 2 6 "int8" `603 
C L "jump_to_isr" 2 6 1 "FUNCTION"
V G "lcd_total_columns" 2 7 "int8" `604 
D G "RS" 2 9 "0b00000001" "P0 - PCF8574T Pin connected to RS"
D G "RW" 2 10 "0b00000010" "P1 - PCF8574T Pin connected to RW"
D G "ENABLE" 2 11 "0b00000100" "P2 - PCF8574T Pin connected to EN"
D G "LCD_BACKLIGHT" 2 12 "0b00001000" "P3 - PCF8574T Pin connected to BACKLIGHT LED"
D G "addr_row_one" 2 14 "0x00" "LCD RAM address for row 1"
D G "addr_row_two" 2 15 "0x40" "LCD RAM address for row 2"
D G "addr_row_three" 2 16 "0x14" "LCD RAM address for row 3"
D G "addr_row_four" 2 17 "0x54" "LCD RAM address for row 4"
D G "ON" 2 19 "1"
D G "OFF" 2 20 "0"
D G "NOT" 2 21 "~"
D G "data_shifted" 2 22 "data<<4"
V G "new_row_request" 2 23 "int8" `605 
V G "BACKLIGHT_LED" 2 23 "int8" `606 
F N "lcd_backlight_led" 2 25 ""
V L "bl" 2 25 "int8" `608 
F G "lcd_backlight_led" 2 26 "void(int8 bl)" `607 
F N "i2c_send_nibble" 2 30 ""
V L "data" 2 30 "int8" `610 
V L "type" 2 30 "int8" `611 
F G "i2c_send_nibble" 2 31 "void(int8 data,int8 type)" `609 
F N "lcd_send_byte" 2 52 ""
V L "data" 2 52 "int8" `613 
V L "type" 2 52 "int8" `614 
F G "lcd_send_byte" 2 53 "void(int8 data,int8 type)" `612 
F N "lcd_clear" 2 61 ""
F G "lcd_clear" 2 62 "void()" `615 
F N "lcd_init" 2 68 ""
C L "lcd_init" 2 6 1 "FUNCTION"
F G "lcd_init" 2 69 "void()" `616 
V L "i" 2 70 "int8" `617 
V L "lcd_type" 2 71 "int8" `618 
C L "lcd_init" 2 6 1 "FUNCTION"
V L "LCD_INIT_STRING" 2 72 "[4]" `621 
C L "lcd_init" 2 6 1 "FUNCTION"
C L "lcd_init" 2 6 3 "FUNCTION"
C L "lcd_init" 2 6 1 "FUNCTION"
C L "lcd_init" 2 6 1 "FUNCTION"
F N "lcd_gotoxy" 2 103 ""
V L "x" 2 103 "int8" `624 
V L "y" 2 103 "int8" `625 
F G "lcd_gotoxy" 2 104 "void(int8 x,int8 y)" `623 
V L "row" 2 105 "int8" `626 
V L "column" 2 105 "int8" `627 
V L "row_addr" 2 105 "int8" `628 
V L "lcd_address" 2 105 "int8" `629  "static char data;"
C L "lcd_putc" 2 6 1 "FUNCTION"
F N "lcd_putc" 2 125 ""
V L "in_data" 2 125 "int8" `631 
F G "lcd_putc" 2 126 "void(int8 in_data)" `630 
D G "_STRING" 3 12 ""
D G "_STDDEF" 4 13 ""
D G "ptrdiff_t" 4 18 "unsigned int16"
D G "size_t" 4 24 "unsigned int16"
D G "wchar_t" 4 26 "char"
D G "NULL" 4 27 "0"
D G "offsetof" 4 29 "(s,f) (offsetofbit(s,f)/8)"
D G "_CTYPE" 5 12 ""
D G "islower" 5 14 "(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz")"
D G "isupper" 5 15 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ")"
D G "isalnum" 5 16 "(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isalpha" 5 17 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isdigit" 5 18 "(x)  isamong(x,"0123456789")"
D G "isspace" 5 19 "(x)  ((x)==' ')"
D G "isxdigit" 5 20 "(x) isamong(x,"0123456789ABCDEFabcdef")"
D G "iscntrl" 5 21 "(x)  ((x)<' ')"
D G "isprint" 5 22 "(x)  ((x)>=' ')"
D G "isgraph" 5 23 "(x)  ((x)>' ')"
D G "ispunct" 5 24 "(x)  (((x)>' ')&&!isalnum(x))"
F N "memmove" 3 34 ""
V L "s1" 3 34 "*int8" `633 
V L "s2" 3 34 "*int8" `634 
V L "n" 3 34 "int16" `635 
F G "memmove" 3 35 "*int8(*int8 s1,*int8 s2,int16 n)" `632 
V L "sc1" 3 36 "*int8" `636 
V L "sc2" 3 37 "*int8" `637 
F N "strncpy" 3 61 ""
V L "s1" 3 61 "*int8" `639 
V L "s2" 3 61 "*int8" `640 
V L "n" 3 61 "int16" `641 
F G "strncpy" 3 62 "*int8(*int8 s1,*int8 s2,int16 n)" `638 
V L "s" 3 63 "*int8" `642 
F N "strcat" 3 78 ""
V L "s1" 3 78 "*int8" `644 
V L "s2" 3 78 "*int8" `645 
F G "strcat" 3 79 "*int8(*int8 s1,*int8 s2)" `643 
V L "s" 3 80 "*int8" `646 
F N "strncat" 3 96 ""
V L "s1" 3 96 "*int8" `648 
V L "s2" 3 96 "*int8" `649 
V L "n" 3 96 "int16" `650 
F G "strncat" 3 97 "*int8(*int8 s1,*int8 s2,int16 n)" `647 
V L "s" 3 98 "*int8" `651 
C L "memcmp" 3 19 3 "FUNCTION"
F N "memcmp" 3 120 ""
V L "s1" 3 120 "*int8" `653 
V L "s2" 3 120 "*int8" `654 
V L "n" 3 120 "int16" `655 
F G "memcmp" 3 121 "sint8(*int8 s1,*int8 s2,int16 n)" `652 
V L "su1" 3 122 "*int8" `656 
V L "su2" 3 122 "*int8" `657 
C L "strcmp" 3 19 2 "FUNCTION"
F N "strcmp" 3 134 ""
V L "s1" 3 134 "*int8" `659 
V L "s2" 3 134 "*int8" `660 
F G "strcmp" 3 135 "sint8(*int8 s1,*int8 s2)" `658 
C L "strcoll" 3 19 2 "FUNCTION"
F N "strcoll" 3 144 ""
V L "s1" 3 144 "*int8" `662 
V L "s2" 3 144 "*int8" `663 
F G "strcoll" 3 145 "sint8(*int8 s1,*int8 s2)" `661 
C L "strncmp" 3 19 4 "FUNCTION"
F N "strncmp" 3 157 ""
V L "s1" 3 157 "*int8" `665 
V L "s2" 3 157 "*int8" `666 
V L "n" 3 157 "int16" `667 
F G "strncmp" 3 158 "sint8(*int8 s1,*int8 s2,int16 n)" `664 
C L "strxfrm" 3 19 3 "FUNCTION"
F N "strxfrm" 3 169 ""
V L "s1" 3 169 "*int8" `669 
V L "s2" 3 169 "*int8" `670 
V L "n" 3 169 "int16" `671 
F G "strxfrm" 3 170 "int16(*int8 s1,*int8 s2,int16 n)" `668 
V L "s" 3 171 "*int8" `672 
V L "n1" 3 172 "int8" `673 
F N "memchr" 3 191 ""
V L "s" 3 191 "*int8" `675 
V L "c" 3 191 "int8" `676 
V L "n" 3 191 "int16" `677 
F G "memchr" 3 192 "*int8(*int8 s,int8 c,int16 n)" `674 
V L "uc" 3 193 "int8" `678 
V L "su" 3 194 "*int8" `679 
F N "strchr" 3 205 ""
V L "s" 3 205 "*int8" `681 
V L "c" 3 205 "int8" `682 
F G "strchr" 3 206 "*int8(*int8 s,int8 c)" `680 
C L "strcspn" 3 19 4 "FUNCTION"
F N "strcspn" 3 217 ""
V L "s1" 3 217 "*int8" `684 
V L "s2" 3 217 "*int8" `685 
F G "strcspn" 3 218 "int8(*int8 s1,*int8 s2)" `683 
V L "sc1" 3 219 "*int8" `686 
V L "sc2" 3 219 "*int8" `687 
F N "strpbrk" 3 232 ""
V L "s1" 3 232 "*int8" `689 
V L "s2" 3 232 "*int8" `690 
F G "strpbrk" 3 233 "*int8(*int8 s1,*int8 s2)" `688 
V L "sc1" 3 234 "*int8" `691 
V L "sc2" 3 234 "*int8" `692 
F N "strrchr" 3 247 ""
V L "s" 3 247 "*int8" `694 
V L "c" 3 247 "int8" `695 
F G "strrchr" 3 248 "*int8(*int8 s,int8 c)" `693 
V L "p" 3 249 "*int8" `696 
C L "strspn" 3 19 2 "FUNCTION"
F N "strspn" 3 262 ""
V L "s1" 3 262 "*int8" `698 
V L "s2" 3 262 "*int8" `699 
F G "strspn" 3 263 "int8(*int8 s1,*int8 s2)" `697 
V L "sc1" 3 264 "*int8" `700 
V L "sc2" 3 264 "*int8" `701 
F N "strstr" 3 281 ""
V L "s1" 3 281 "*int8" `703 
V L "s2" 3 281 "*int8" `704 
F G "strstr" 3 282 "*int8(*int8 s1,*int8 s2)" `702 
V L "s" 3 283 "*int8" `705 
V L "t" 3 283 "*int8" `706 
F N "strtok" 3 320 ""
V L "s1" 3 320 "*int8" `708 
V L "s2" 3 320 "*int8" `709 
F G "strtok" 3 321 "*int8(*int8 s1,*int8 s2)" `707 
V L "beg" 3 322 "*int8" `710 
V L "end" 3 322 "*int8" `711 
V L "save" 3 323 "*int8" `712 
C L "strlen" 3 19 6 "FUNCTION"
F N "strlen" 3 369 ""
V L "s" 3 369 "*int8" `714 
F G "strlen" 3 370 "int8(*int8 s)" `713 
V L "sc" 3 371 "*int8" `715 
C L "stricmp" 3 19 2 "FUNCTION"
F N "stricmp" 3 380 ""
V L "s1" 3 380 "*int8" `717 
V L "s2" 3 380 "*int8" `718 
F G "stricmp" 3 381 "sint8(*int8 s1,*int8 s2)" `716 
F N "strlwr" 3 394 ""
V L "s" 3 394 "*int8" `722 
F G "strlwr" 3 395 "*int8(*int8 s)" `721 
V L "p" 3 396 "*int8" `723 
F N "strupr" 3 408 ""
V L "s" 3 408 "*int8" `725 
F G "strupr" 3 409 "*int8(*int8 s)" `724 
V L "p" 3 410 "*int8" `726 
D G "MATH_H" 6 30 ""
D G "PI" 6 35 "3.1415926535897932"
D G "SQRT2" 6 38 "1.4142135623730950"
C L "CEIL_FLOOR" 6 2 3 "FUNCTION"
F N "CEIL_FLOOR" 6 45 ""
V L "x" 6 45 "float" `728 
V L "n" 6 45 "int8" `729 
F G "CEIL_FLOOR" 6 46 "float(float x,int8 n)" `727 
V L "y" 6 47 "float" `730 
V L "res" 6 47 "float" `731 
V L "l" 6 48 "int16" `732 
V L "s" 6 49 "int1" `733 
C L "floor" 6 2 5 "FUNCTION"
F N "floor" 6 207 ""
V L "x" 6 207 "float" `748 
F G "floor" 6 208 "float(float x)" `747 
C L "ceil" 6 2 5 "FUNCTION"
F N "ceil" 6 233 ""
V L "x" 6 233 "float" `750 
F G "ceil" 6 234 "float(float x)" `749 
D G "fabs" 6 259 "abs"
C L "fmod" 6 2 6 "FUNCTION"
F N "fmod" 6 271 ""
V L "x" 6 271 "float" `752 
V L "y" 6 271 "float" `753 
F G "fmod" 6 272 "float(float x,float y)" `751 
V L "i" 6 273 "float" `754 
D G "LN2" 6 334 "0.6931471805599453"
D G "LN2_INV" 6 335 "1.4426950408889634073"
V G "pe" 6 337 "[6]" `759 
F N "exp" 6 341 ""
V L "x" 6 341 "float" `762 
F G "exp" 6 342 "float(float x)" `761 
V L "y" 6 343 "float" `763 
V L "res" 6 343 "float" `764 
V L "r" 6 343 "float" `765 
V L "n" 6 347 "sint8" `766 
V L "s" 6 348 "int1" `767 
C L "exp" 6 2 1 "FUNCTION"
V G "pl" 6 525 "[4]" `771 
V G "ql" 6 526 "[4]" `774 
C L "log" 6 2 3 "FUNCTION"
F N "log" 6 534 ""
V L "x" 6 534 "float" `777 
F G "log" 6 535 "float(float x)" `776 
V L "y" 6 536 "float" `778 
V L "res" 6 536 "float" `779 
V L "r" 6 536 "float" `780 
V L "y2" 6 536 "float" `781 
V L "n" 6 540 "sint8" `782 
C L "log" 6 2 1 "FUNCTION"
D G "LN10" 6 758 "2.3025850929940456"
D G "LN10_INV" 6 759 "0.4342944819032518276"
C L "log10" 6 2 3 "FUNCTION"
F N "log10" 6 767 ""
V L "x" 6 767 "float" `784 
F G "log10" 6 768 "float(float x)" `783 
V L "r" 6 769 "float" `785 
C L "modf" 6 2 8 "FUNCTION"
F N "modf" 6 808 ""
V L "value" 6 808 "float" `787 
V L "iptr" 6 808 "*float" `788 
F G "modf" 6 809 "float(float value,*float iptr)" `786 
C L "pwr" 6 2 6 "FUNCTION"
F N "pwr" 6 836 ""
V L "x" 6 836 "float" `790 
V L "y" 6 836 "float" `791 
F G "pwr" 6 837 "float(float x,float y)" `789 
C L "pow" 6 2 7 "FUNCTION"
F N "pow" 6 899 ""
V L "x" 6 899 "float" `793 
V L "y" 6 899 "float" `794 
F G "pow" 6 900 "float(float x,float y)" `792 
C L "sqrt" 6 2 5 "FUNCTION"
F N "sqrt" 6 960 ""
V L "x" 6 960 "float" `796 
F G "sqrt" 6 961 "float(float x)" `795 
V L "y" 6 962 "float" `797 
V L "res" 6 962 "float" `798 
V L "p" 6 966 "*int8" `799 
D G "PI_DIV_BY_TWO_INV" 6 1155 "0.63661977236758134"
D G "PI_DIV_BY_TWO" 6 1159 "1.5707963267948966"
D G "TWOBYPI" 6 1163 "0.6366197723675813"
C L "cos" 6 2 3 "FUNCTION"
F N "cos" 6 1171 ""
V L "x" 6 1171 "float" `801 
F G "cos" 6 1172 "float(float x)" `800 
V L "y" 6 1173 "float" `802 
V L "t" 6 1173 "float" `803 
V L "t2" 6 1173 "float" `804 
V L "quad" 6 1174 "int8" `805 
V L "i" 6 1174 "int8" `806 
V L "frac" 6 1175 "float" `807 
V L "p" 6 1176 "float[5]" `808  "by the series definition for cosine"
C L "cos" 6 2 1 "FUNCTION"
C L "cos" 6 2 2 "FUNCTION"
C L "cos" 6 2 1 "FUNCTION"
C L "cos" 6 2 1 "FUNCTION"
C L "cos" 6 2 1 "FUNCTION"
C L "cos" 6 2 1 "FUNCTION"
C L "cos" 6 2 1 "FUNCTION"
C L "cos" 6 2 1 "FUNCTION"
C L "sin" 6 2 5 "FUNCTION"
F N "sin" 6 1312 ""
V L "x" 6 1312 "float" `810 
F G "sin" 6 1313 "float(float x)" `809 
C L "tan" 6 2 5 "FUNCTION"
F N "tan" 6 1338 ""
V L "x" 6 1338 "float" `812 
F G "tan" 6 1339 "float(float x)" `811 
V L "c" 6 1340 "float" `813 
V L "s" 6 1340 "float" `814 
V G "pas" 6 1378 "[3]" `816 
V G "qas" 6 1379 "[3]" `819 
F N "ASIN_COS" 6 1381 ""
V L "x" 6 1381 "float" `822 
V L "n" 6 1381 "int8" `823 
F G "ASIN_COS" 6 1382 "float(float x,int8 n)" `821 
V L "y" 6 1383 "float" `824 
V L "res" 6 1383 "float" `825 
V L "r" 6 1383 "float" `826 
V L "y2" 6 1383 "float" `827 
V L "s" 6 1384 "int1" `828 
C L "ASIN_COS" 6 2 1 "FUNCTION"
C L "ASIN_COS" 6 2 1 "FUNCTION"
C L "asin" 6 2 5 "FUNCTION"
F N "asin" 6 1539 ""
V L "x" 6 1539 "float" `830 
F G "asin" 6 1540 "float(float x)" `829 
V L "r" 6 1541 "float" `831 
C L "acos" 6 2 5 "FUNCTION"
F N "acos" 6 1573 ""
V L "x" 6 1573 "float" `833 
F G "acos" 6 1574 "float(float x)" `832 
V L "r" 6 1575 "float" `834 
V G "pat" 6 1601 "[4]" `836 
V G "qat" 6 1602 "[4]" `839 
C L "atan" 6 2 3 "FUNCTION"
F N "atan" 6 1610 ""
V L "x" 6 1610 "float" `842 
F G "atan" 6 1611 "float(float x)" `841 
V L "y" 6 1612 "float" `843 
V L "res" 6 1612 "float" `844 
V L "r" 6 1612 "float" `845 
V L "s" 6 1613 "int1" `846 
V L "flag" 6 1613 "int1" `847 
C L "atan" 6 2 1 "FUNCTION"
C L "atan2" 6 2 7 "FUNCTION"
F N "atan2" 6 1753 ""
V L "y" 6 1753 "float" `849 
V L "x" 6 1753 "float" `850 
F G "atan2" 6 1754 "float(float y,float x)" `848 
V L "z" 6 1755 "float" `851 
V L "sign" 6 1756 "int1" `852 
V L "quad" 6 1757 "int8" `853 
C L "atan2" 6 2 1 "FUNCTION"
C L "atan2" 6 2 1 "FUNCTION"
C L "cosh" 6 2 7 "FUNCTION"
F N "cosh" 6 1975 ""
V L "x" 6 1975 "float" `856 
F G "cosh" 6 1976 "float(float x)" `855 
C L "sinh" 6 2 6 "FUNCTION"
F N "sinh" 6 2002 ""
V L "x" 6 2002 "float" `858 
F G "sinh" 6 2003 "float(float x)" `857 
C L "tanh" 6 2 6 "FUNCTION"
F N "tanh" 6 2032 ""
V L "x" 6 2032 "float" `860 
F G "tanh" 6 2033 "float(float x)" `859 
D G "LOG2" 6 2062 ".30102999566398119521"
D G "LOG2_INV" 6 2063 "3.32192809488736234787"
F N "frexp" 6 2064 ""
V L "x" 6 2064 "float" `862 
V L "exp" 6 2064 "*sint8" `863 
F G "frexp" 6 2065 "float(float x,*sint8 exp)" `861 
V L "res" 6 2066 "float" `864 
V L "sign" 6 2067 "int1" `865 
C L "ldexp" 6 2 6 "FUNCTION"
F N "ldexp" 6 2209 ""
V L "value" 6 2209 "float" `867 
V L "exp" 6 2209 "sint8" `868 
F G "ldexp" 6 2210 "float(float value,sint8 exp)" `866 
D G "_STDLIB" 7 12 ""
D G "RAND_MAX" 7 19 "32767" "The value of which is the maximum value"
D G "LONG_POINTERS" 7 25 "1"
T G "div_t" 7 33 "{sint8 quot,sint8 rem}" `872 
T G "ldiv_t" 7 38 "{sint16 quot,sint16 rem}" `876  "(C) Copyright 1996,2003 Custom Computer Services           ////"
C L "atoi" 4 3 6 "FUNCTION"
C L "atoi" 7 43 2 "FUNCTION"
C L "atoi" 7 46 1 "*"
C L "atoi" 7 46 1 "*"
F N "atoi" 7 50 ""
V L "s" 7 50 "*int8" `878 
f G "atoi" 7 50 "sint8(*int8 s)" `877  "Syntax: signed int32  atoi32(char * s)"
F N "atoi32" 7 58 ""
V L "s" 7 58 "*int8" `880 
f G "atoi32" 7 58 "sint32(*int8 s)" `879  "Syntax: char *  itoa(signed int32 num, int8 base, char * s)"
C L "atoi32" 7 46 2 "FUNCTION"
F N "itoa" 7 79 ""
V L "num" 7 79 "sint32" `882 
V L "base" 7 79 "int8" `883 
V L "s" 7 79 "*int8" `884 
f G "itoa" 7 79 "*int8(sint32 num,int8 base,*int8 s)" `881  "Standard template: signed int16  atol(char * s)"
C L "itoa" 7 81 1 "*"
C L "itoa" 7 81 1 "*"
F N "atol" 7 85 ""
V L "s" 7 85 "*int8" `886 
f G "atol" 7 85 "sint16(*int8 s)" `885  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "atol" 7 87 1 "*"
C L "atol" 7 87 1 "*"
C L "atol" 7 87 1 "*"
C L "atol" 7 87 1 "*"
F N "strtol" 7 93 ""
V L "s" 7 93 "*int8" `888 
V L "endptr" 7 93 "*int8" `889 
V L "base" 7 93 "sint8" `890 
f G "strtol" 7 93 "sint16(*int8 s,*int8 endptr,sint8 base)" `887  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "strtol" 7 95 1 "*"
C L "strtol" 7 95 1 "*"
C L "strtol" 7 95 1 "*"
C L "strtol" 7 95 1 "*"
F N "strtoul" 7 101 ""
V L "s" 7 101 "*int8" `892 
V L "endptr" 7 101 "*int8" `893 
V L "base" 7 101 "sint8" `894 
f G "strtoul" 7 101 "int16(*int8 s,*int8 endptr,sint8 base)" `891  "Standart template: float strtof(char * s,char *endptr)"
C L "strtoul" 7 95 2 "FUNCTION"
C L "strtoul" 7 103 1 "*"
C L "strtoul" 7 103 1 "*"
C L "strtoul" 7 103 1 "*"
F N "strtof" 7 110 ""
V L "s" 7 110 "*int8" `896 
V L "endptr" 7 110 "*int8" `897 
f G "strtof" 7 110 "float(*int8 s,*int8 endptr)" `895  "provided for compatibility"
D G "strtof48" 7 116 "(s,e) strtof(s, e)"
D G "strtod" 7 117 "(s,e) strtof(s, e)"
C L "strtof" 7 103 1 "FUNCTION"
C L "strtof" 7 120 1 "*"
D G "atof" 7 124 "(s)   strtof(s, 0)"
C L "strtof" 7 120 1 "FUNCTION"
C L "strtof" 7 143 1 "*"
C L "strtof" 7 143 1 "*"
C L "strtof" 7 143 1 "*"
F N "atoe" 7 149 ""
V L "s" 7 149 "*int8" `899 
f G "atoe" 7 149 "float(*int8 s)" `898  "Pseudo-random sequence generation functions"
C L "atoe" 7 143 1 "FUNCTION"
C L "atoe" 7 160 1 "*"
C L "atoe" 7 160 1 "*"
C L "atoe" 7 160 1 "*"
C L "atoe" 7 160 1 "*"
C L "atoe" 7 160 1 "*"
F N "rand" 7 169 ""
f G "rand" 7 169 "int16()" `900  "The srand function uses the argument as a seed for a new sequence of"
C L "rand" 7 171 1 "*"
C L "rand" 7 171 1 "*"
C L "rand" 7 171 1 "*"
C L "rand" 7 171 1 "*"
C L "rand" 7 171 1 "*"
C L "rand" 7 171 1 "*"
C L "rand" 7 171 1 "*"
C L "rand" 7 171 1 "*"
C L "rand" 7 171 1 "*"
C L "rand" 7 171 1 "*"
C L "rand" 7 171 1 "*"
C L "rand" 7 171 1 "*"
C L "rand" 7 171 1 "*"
C L "rand" 7 171 1 "*"
C L "rand" 7 171 1 "*"
F N "srand" 7 191 ""
V L "seed" 7 191 "int32" `902 
f G "srand" 7 191 "void(int32 seed)" `901  "Memory management functions"
C L "srand" 7 171 3 "FUNCTION"
F N "system" 7 205 ""
V L "string" 7 205 "*int8" `904 
f G "system" 7 205 "sint8(*int8 string)" `903  "Searching and sorting utilities"
C L "system" 7 171 1 "FUNCTION"
C L "system" 7 211 1 "*"
C L "system" 7 211 1 "*"
C L "system" 7 211 1 "*"
C L "system" 7 211 1 "*"
C L "system" 7 211 1 "*"
C L "system" 7 211 1 "*"
C L "system" 7 211 1 "*"
C L "system" 7 211 1 "*"
C L "system" 7 211 1 "*"
C L "system" 7 211 1 "*"
C L "system" 7 211 4 "*"
C L "system" 7 229 1 "*"
C L "system" 7 229 1 "*"
C L "system" 7 229 1 "*"
C L "system" 7 229 1 "*"
C L "system" 7 229 1 "*"
C L "system" 7 229 1 "*"
C L "system" 7 229 1 "*"
C L "system" 7 229 1 "*"
D G "labs" 7 249 "abs"
F N "div" 7 251 ""
V L "numer" 7 251 "sint8" `906 
V L "denom" 7 251 "sint8" `907 
f G "div" 7 251 "div_t(sint8 numer,sint8 denom)" `905 
F N "ldiv" 7 252 ""
V L "numer" 7 252 "sint16" `909 
V L "denom" 7 252 "sint16" `910 
f G "ldiv" 7 252 "ldiv_t(sint16 numer,sint16 denom)" `908  "Multibyte character functions"
C L "ldiv" 7 229 4 "FUNCTION"
C L "ldiv" 4 2 7 "FUNCTION"
C L "ldiv" 3 2 7 "FUNCTION"
F N "div" 7 274 ""
V L "numer" 7 274 "sint8" `906 
V L "denom" 7 274 "sint8" `913 
F G "div" 7 275 "div_t(sint8 numer,sint8 denom)" `905 
V L "val" 7 276 "div_t" `911 
F N "ldiv" 7 282 ""
V L "numer" 7 282 "sint16" `909 
V L "denom" 7 282 "sint16" `920 
F G "ldiv" 7 283 "ldiv_t(sint16 numer,sint16 denom)" `908 
V L "val" 7 284 "ldiv_t" `918 
F N "atoe" 7 361 ""
V L "s" 7 361 "*int8" `926 
F G "atoe" 7 362 "float(*int8 s)" `898 
V L "pow10" 7 363 "float" `925 
V L "result" 7 364 "float" `926 
V L "sign" 7 365 "int8" `927 
V L "expsign" 7 366 "int8" `928 
V L "c" 7 367 "int8" `929 
V L "ptr" 7 368 "int8" `930 
V L "i" 7 369 "int8" `931 
V L "exp" 7 370 "float" `932 
V L "expcnt" 7 371 "int8" `933 
C L "atoe" 7 397 1 "FUNCTION"
F N "atoi" 7 429 ""
V L "s" 7 429 "*int8" `935 
F G "atoi" 7 430 "sint8(*int8 s)" `877 
V L "result" 7 431 "sint8" `934 
V L "sign" 7 432 "int8" `935 
V L "base" 7 432 "int8" `936 
V L "index" 7 432 "int8" `937 
V L "c" 7 433 "int8" `938 
C L "atoi" 7 397 1 "FUNCTION"
C L "atoi" 7 397 1 "FUNCTION"
C L "atoi" 7 397 1 "FUNCTION"
C L "atoi" 7 397 1 "FUNCTION"
C L "atoi" 7 397 1 "FUNCTION"
C L "atoi" 7 397 1 "FUNCTION"
F N "atol" 7 498 ""
V L "s" 7 498 "*int8" `940 
F G "atol" 7 499 "sint16(*int8 s)" `885 
V L "result" 7 500 "sint16" `939 
V L "sign" 7 501 "int8" `940 
V L "base" 7 501 "int8" `941 
V L "index" 7 501 "int8" `942 
V L "c" 7 502 "int8" `943 
C L "atol" 7 397 1 "FUNCTION"
C L "atol" 7 397 1 "FUNCTION"
C L "atol" 7 397 1 "FUNCTION"
C L "atol" 7 397 1 "FUNCTION"
C L "mult_with10" 7 397 1 "FUNCTION"
F N "mult_with10" 7 565 ""
V L "num" 7 565 "int32" `945 
F G "mult_with10" 7 566 "sint32(int32 num)" `944 
F N "atoi32" 7 571 ""
V L "s" 7 571 "*int8" `947 
F G "atoi32" 7 572 "sint32(*int8 s)" `879 
V L "result" 7 573 "sint32" `946 
V L "sign" 7 574 "int8" `947 
V L "base" 7 574 "int8" `948 
V L "index" 7 574 "int8" `949 
V L "c" 7 575 "int8" `950 
C L "atoi32" 7 397 1 "FUNCTION"
C L "atoi32" 7 397 1 "FUNCTION"
C L "atoi32" 7 397 1 "FUNCTION"
C L "atoi32" 7 397 1 "FUNCTION"
C L "atoi32" 7 397 1 "FUNCTION"
F N "itoa" 7 770 ""
V L "num" 7 770 "sint32" `882 
V L "base" 7 770 "int8" `883 
V L "s" 7 770 "*int8" `954 
F G "itoa" 7 771 "*int8(sint32 num,int8 base,*int8 s)" `881 
V L "temp" 7 772 "int32" `951 
V L "i" 7 773 "int8" `952 
V L "sign" 7 773 "int8" `953 
V L "cnt" 7 773 "int8" `954 
V L "c" 7 774 "int8" `955 
C L "itoa" 7 397 1 "FUNCTION"
C L "itoa" 7 397 1 "FUNCTION"
C L "itoa" 7 397 1 "FUNCTION"
C L "itoa" 7 397 1 "FUNCTION"
C L "itoa" 7 397 1 "FUNCTION"
F N "strtof" 7 885 ""
V L "s" 7 885 "*int8" `896 
V L "endptr" 7 885 "*int8" `964 
F G "strtof" 7 886 "float(*int8 s,*int8 endptr)" `895 
V L "pow10" 7 887 "float" `962 
V L "result" 7 888 "float" `963 
V L "skip" 7 889 "int1" `964 
V L "sign" 7 889 "int1" `965 
V L "point" 7 889 "int1" `966 
V L "c" 7 890 "int8" `967 
V L "ptr" 7 891 "int8" `968 
F N "strtoul" 7 1103 ""
V L "s" 7 1103 "*int8" `892 
V L "endptr" 7 1103 "*int8" `893 
V L "base" 7 1103 "sint8" `973 
F G "strtoul" 7 1104 "int16(*int8 s,*int8 endptr,sint8 base)" `891 
V L "sc" 7 1105 "*int8" `970 
V L "s1" 7 1105 "*int8" `971 
V L "sd" 7 1105 "*int8" `972 
V L "x" 7 1106 "int16" `973 
V L "sign" 7 1107 "int8" `974 
V L "digits" 7 1108 "int8[1]" `975 
C L "strtoul" 7 397 1 "FUNCTION"
C L "strtoul" 7 397 1 "FUNCTION"
C L "strtoul" 7 397 1 "FUNCTION"
F N "strtol" 7 1165 ""
V L "s" 7 1165 "*int8" `888 
V L "endptr" 7 1165 "*int8" `889 
V L "base" 7 1165 "sint8" `980 
F G "strtol" 7 1166 "sint16(*int8 s,*int8 endptr,sint8 base)" `887 
V L "sc" 7 1167 "*int8" `977 
V L "s1" 7 1167 "*int8" `978 
V L "sd" 7 1167 "*int8" `979 
V L "x" 7 1168 "sint16" `980 
V L "sign" 7 1169 "int8" `981 
V L "digits" 7 1170 "int8[1]" `982 
C L "strtol" 7 397 1 "FUNCTION"
C L "strtol" 7 397 1 "FUNCTION"
C L "strtol" 7 397 1 "FUNCTION"
F N "system" 7 1228 ""
V L "string" 7 1228 "*int8" `985 
F G "system" 7 1229 "sint8(*int8 string)" `903 
F N "mblen" 7 1233 ""
V L "s" 7 1233 "*int8" `985 
V L "n" 7 1233 "int16" `986 
F G "mblen" 7 1234 "int8(*int8 s,int16 n)" `984 
F N "mbtowc" 7 1238 ""
V L "pwc" 7 1238 "*int8" `988 
V L "s" 7 1238 "*int8" `989 
V L "n" 7 1238 "int16" `990 
F G "mbtowc" 7 1239 "int8(*int8 pwc,*int8 s,int16 n)" `987 
F N "wctomb" 7 1244 ""
V L "s" 7 1244 "*int8" `992 
V L "wchar" 7 1244 "int8" `993 
F G "wctomb" 7 1245 "int8(*int8 s,int8 wchar)" `991 
F N "mbstowcs" 7 1250 ""
V L "pwcs" 7 1250 "*int8" `995 
V L "s" 7 1250 "*int8" `996 
V L "n" 7 1250 "int16" `997 
F G "mbstowcs" 7 1251 "int16(*int8 pwcs,*int8 s,int16 n)" `994 
F N "wcstombs" 7 1256 ""
V L "s" 7 1256 "*int8" `999 
V L "pwcs" 7 1256 "*int8" `1000 
V L "n" 7 1256 "int16" `1001 
F G "wcstombs" 7 1257 "int16(*int8 s,*int8 pwcs,int16 n)" `998 
V G "_Randseed" 7 1266 "int32" `1002 
F N "rand" 7 1268 ""
F G "rand" 7 1269 "int16()" `900 
F N "srand" 7 1274 ""
V L "seed" 7 1274 "int32" `1007 
F G "srand" 7 1275 "void(int32 seed)" `901 
F N "*_Cmpfun" 7 1284 ""
V L "p1" 7 1284 "*int8" `1007 
V L "p2" 7 1284 "*int8" `1008 
T G "*_Cmpfun" 7 1284 "sint8(*int8 p1,*int8 p2)" `1006 
F N "qsort" 7 1291 ""
V L "qdata" 7 1291 "*int8" `1011 
V L "qitems" 7 1291 "int8" `1012 
V L "qsize" 7 1291 "int8" `1013 
V L "cmp" 7 1291 "_Cmpfun" `1014 
F G "qsort" 7 1291 "void(*int8 qdata,int8 qitems,int8 qsize,_Cmpfun cmp)" `1010 
V L "m" 7 1292 "int8" `1015 
V L "j" 7 1292 "int8" `1016 
V L "i" 7 1292 "int8" `1017 
V L "l" 7 1292 "int8" `1018 
V L "done" 7 1293 "int1" `1019 
V L "t" 7 1294 "int8[16]" `1020 
F N "bsearch" 7 1319 ""
V L "key" 7 1319 "*int8" `1023 
V L "base" 7 1319 "*int8" `1024 
V L "num" 7 1319 "int16" `1025 
V L "width" 7 1319 "int16" `1026 
V L "cmp" 7 1319 "_Cmpfun" `1027 
F G "bsearch" 7 1320 "*int8(*int8 key,*int8 base,int16 num,int16 width,_Cmpfun cmp)" `1022 
V L "p" 7 1321 "*int8" `1028 
V L "q" 7 1321 "*int8" `1029 
V L "n" 7 1322 "int16" `1030 
V L "pivot" 7 1323 "int16" `1031 
V L "val" 7 1324 "sint8" `1032 
C L "bsearch" 7 397 1 "FUNCTION"
D G "DHT11_PIN" 0 11 "PIN_A1" "connection pin between DHT11 and mcu"
D G "FLAME_SENSOR_PIN" 0 12 "PIN_A2"
V G "message1" 0 14 "int8[1]" `1036 
V G "message2" 0 15 "int8[1]" `1037 
V G "Time_out" 0 17 "int1" `1038 
V G "T_byte1" 0 18 "int8" `1039 
V G "T_byte2" 0 18 "int8" `1040 
V G "RH_byte1" 0 18 "int8" `1041 
V G "RH_byte2" 0 18 "int8" `1042 
V G "CheckSum" 0 18 "int8" `1043 
V G "LDR_value" 0 19 "int16" `1044  "float temperature = 0.0; // variable to store temperature value"
V G "temperature" 0 22 "float" `1045 
V G "humidity" 0 22 "float" `1046 
F N "start_signal" 0 25 ""
F G "start_signal" 0 25 "void()" `1047 
C L "start_signal" 0 21 1 "FUNCTION"
C L "start_signal" 0 21 1 "FUNCTION"
C L "start_signal" 0 21 1 "FUNCTION"
C L "start_signal" 0 21 1 "FUNCTION"
F N "check_response" 0 34 ""
F G "check_response" 0 34 "int8()" `1048 
C L "check_response" 0 21 1 "FUNCTION"
C L "check_response" 0 21 1 "FUNCTION"
F N "Read_Data" 0 45 ""
F G "Read_Data" 0 45 "int8()" `1049 
V L "i" 0 46 "int8" `1050 
V L "k" 0 46 "int8" `1051 
V L "_data" 0 46 "int8" `1052 
C L "Read_Data" 0 21 1 "FUNCTION"
C L "Read_Data" 0 21 1 "FUNCTION"
C L "Read_Data" 0 21 1 "FUNCTION"
C L "Read_Data" 0 21 1 "FUNCTION"
C L "Read_Data" 0 21 1 "FUNCTION"
F N "read_dht11" 0 76 ""
F G "read_dht11" 0 76 "void()" `1053 
C L "read_dht11" 0 21 1 "FUNCTION"
C L "read_dht11" 0 21 1 "FUNCTION"
C L "read_dht11" 0 21 1 "FUNCTION"
C L "read_dht11" 0 21 1 "FUNCTION"
C L "read_dht11" 0 21 1 "FUNCTION"
C L "read_dht11" 0 21 1 "FUNCTION"
C L "read_dht11" 0 21 1 "FUNCTION"
C L "read_dht11" 0 21 1 "FUNCTION"
C L "read_dht11" 0 21 1 "FUNCTION"
F N "MAIN" 0 115 ""
F G "MAIN" 0 115 "void()" `1062 
C L "MAIN" 0 21 1 "FUNCTION"
C L "MAIN" 0 21 1 "FUNCTION"
C L "MAIN" 0 21 1 "FUNCTION"
C L "MAIN" 0 21 1 "FUNCTION"
V L "flameData" 0 129 "int8" `1065 
C L "MAIN" 0 21 1 "FUNCTION"
C L "MAIN" 0 21 1 "FUNCTION"
C L "MAIN" 0 21 1 "FUNCTION"
C L "MAIN" 0 21 1 "FUNCTION"
C L "MAIN" 0 21 1 "FUNCTION"
C L "MAIN" 0 21 1 "FUNCTION"
C L "MAIN" 0 21 1 "FUNCTION"
C L "MAIN" 0 21 1 "FUNCTION"
C L "MAIN" 0 21 1 "FUNCTION"
C L "MAIN" 0 21 1 "FUNCTION"
C L "MAIN" 0 21 1 "FUNCTION"
C L "MAIN" 0 21 2 "FUNCTION"
V L "i" 0 186 "int8" `1071 
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 4 0
F B "write_program_memory8" 4 0
F B "read_program_memory" 4 0
F B "read_program_memory8" 4 0
F B "read_rom_memory" 3 0
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_d" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_d" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_d" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_d" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_d" 0 0
F B "input_change_e" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "set_analog_pins" 1 2
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_ccp1" 1 0
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_psp" 1 0
F B "psp_output_full" 0 0
F B "psp_input_full" 0 0
F B "psp_overflow" 0 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 2
F B "spi_data_is_in2" 0 0
F B "i2c_read" 0 2
F B "i2c_write" 1 2
F B "i2c_start" 0 2
F B "i2c_stop" 0 1
F B "i2c_isr_state" 0 1
F B "delay_ms" 1 0
F B "delay_us" 1 0
